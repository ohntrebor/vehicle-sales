name: 🏎️ CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build da solução
  build:
    name: 🛠️ Build Solution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build --no-restore --configuration Release

  # Testes unitários
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
  
      - name: Restore dependencies
        run: dotnet restore
  
      - name: Build
        run: dotnet build --no-restore --configuration Release
  
      - name: Run Unit Tests
        run: dotnet test --no-build --verbosity normal --configuration Release --filter "Category=Unit"
  
  # Testes de integração
  integration-tests:
    name: 🗄️ Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
  
      - name: Restore dependencies
        run: dotnet restore
  
      - name: Build
        run: dotnet build --no-restore --configuration Release
  
      - name: Run Integration Tests
        run: dotnet test --no-build --verbosity normal --configuration Release --filter "Category=Integration"

  # Build da imagem Docker
  docker-build:
    name: 🐋 Docker Build
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t vehicle-sales-api:${{ github.sha }} .

      - name: Save Docker image
        run: docker save vehicle-sales-api:${{ github.sha }} > vehicle-sales-api.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: vehicle-sales-api.tar

  # Push para GitHub Container Registry (cria o package)
  docker-push:
    name: 🚀 Docker Push
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load < vehicle-sales-api.tar

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and Push to GitHub Container Registry
        run: |
          docker tag vehicle-sales-api:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag vehicle-sales-api:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}